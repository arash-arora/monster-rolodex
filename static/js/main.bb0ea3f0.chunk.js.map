{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/searchField.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","map","SearchBox","type","placeholder","onChange","handleChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAIaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCLjBC,EAAW,SAACR,GAErB,OAAQ,qBAAKC,UAAU,YAAf,SAA4BD,EAAMM,KAAKG,KAAI,SAAAL,GAC/C,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCHrBK,G,YAAa,SAACV,GACvB,OAAQ,uBAAOC,UAAU,SAASU,KAAK,SAASC,YAAaZ,EAAMY,YAAaC,SAAUb,EAAMc,iBC+CrFC,E,kDA7Cb,aAAe,IAAD,8BACZ,gBAiBJD,aAAe,SAACE,GACZ,OAAO,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAjBhD,EAAKC,MAAQ,CACXjB,QAAS,GACTc,YAAa,IAJH,E,qDAYhB,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACb,QAASsB,S,oBAYvC,WACE,MAA+BC,KAAKN,MAA7BjB,EAAP,EAAOA,QAASc,EAAhB,EAAgBA,YACVU,EAAmBxB,EAAQyB,QAAO,SAAAzB,GACtC,OAAOA,EAAQE,KAAKwB,cAAcC,SAASb,EAAYY,kBAEzD,OACE,sBAAK7B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACAW,YAAY,kBACXE,aAAca,KAAKb,eAEpB,cAAC,EAAD,CAAUR,KAAQsB,W,GAzCRI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bb0ea3f0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./card.styles.css\"\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n} \r\n\r\n//","import React from \"react\";\r\nimport \"./card-list-styles.css\"\r\nimport {Card} from \"../card/card.component\"\r\n\r\nexport const CardList = (props) => {\r\n    // console.log(props)\r\n    return (<div className=\"card-list\">{props.name.map(monster => {\r\n        return <Card key={monster.id} monster={monster} />\r\n    })}</div>) //returns the innerHTML of CardList\r\n}  ","import React from \"react\"\r\nimport \"./searchField.styles.css\"\r\n\r\n\r\nexport const SearchBox  = (props) => {\r\n    return (<input className=\"search\" type=\"search\" placeholder={props.placeholder} onChange={props.handleChange} />) \r\n}","import {CardList} from \"./components/card-list/card-list.component\"\nimport './App.css';\nimport React, {Component} from \"react\"\nimport { SearchBox } from \"./components/search/searchField.component\";\n \nclass App extends Component {\n  // declaring empty array \n  constructor() {\n    super();\n    this.state = {\n      monster: [],\n      searchField: ''\n    };\n\n    // this.handleChange = this.handleChange.bind(this) //binding this keyword to handleChange\n  }\n  \n\n  //fetch api\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json()) // returns the response in json format\n  .then(users => this.setState({monster: users}))\n} //when react puts our component o n the page, it renders it onto the DOM for the first time and call whatever block of code we write inside this function\n\nhandleChange = (event) => { //bind the this keyword automatically\n    return this.setState({searchField: event.target.value})\n}\n\n// handleClick() {\n//   console.log(\"target\");\n// }\n\n// rendering\n  render() {\n    const {monster, searchField} = this.state;\n    const filteredMonsters = monster.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase()) //includes method just check if the passed string is contained in the string, where the method is called\n    })\n    return ( \n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n        placeholder=\"search monsters\" \n         handleChange={this.handleChange} />\n         {/* <button onClick={this.handleClick} />  */}\n        <CardList name = {filteredMonsters} />\n      </div>\n    )\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}